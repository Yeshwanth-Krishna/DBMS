-- Drop the table if it already exists (optional, useful for testing)
DROP TABLE IF EXISTS User;

-- Create the User table
CREATE TABLE User (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Username VARCHAR(100) UNIQUE NOT NULL,
    -- Store hashed passwords, not plaintext! Increase length if needed.
    PasswordHash VARCHAR(255) NOT NULL,
    Role ENUM('Student', 'Faculty', 'Admin') NOT NULL
);

-- Sample data
-- IMPORTANT In a real application, you MUST hash passwords before inserting.
-- Example using a placeholder hash (replace with actual hashes generated by Werkzeug)
-- For 'studentpass', the hash might look like 'pbkdf2sha256...'
-- For 'facultypass', the hash might look like 'pbkdf2sha256...'
-- For 'adminpass', the hash might look like 'pbkdf2sha256...'
--
-- You would generate these hashes using generate_password_hash('actual_password') in Python.
-- For this example, we'll insert the plaintext directly as shown in the original snippet,
-- but the Python code includes commented-out logic for checking hashes.
INSERT INTO User (Username, PasswordHash, Role) VALUES
('student1', 'studentpass', 'Student'), -- Replace 'studentpass' with its hash in production
('faculty1', 'facultypass', 'Faculty'), -- Replace 'facultypass' with its hash in production
('admin1', 'adminpass', 'Admin');       -- Replace 'adminpass' with its hash in production

-- Verify insertion (optional)
SELECT  FROM User;